{"id":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","dependencies":[{"name":"D:\\Documents\\DEV\\ol6\\package.json","includedInParent":true,"mtime":1603819498857},{"name":"D:\\Documents\\DEV\\ol6\\node_modules\\cesium\\package.json","includedInParent":true,"mtime":1603819498545}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\n/**\n * @license\n * Copyright (c) 2000-2005, Sean O'Neil (s_p_oneil@hotmail.com)\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n *\n * * Redistributions of source code must retain the above copyright notice,\n *   this list of conditions and the following disclaimer.\n * * Redistributions in binary form must reproduce the above copyright notice,\n *   this list of conditions and the following disclaimer in the documentation\n *   and/or other materials provided with the distribution.\n * * Neither the name of the project nor the names of its contributors may be\n *   used to endorse or promote products derived from this software without\n *   specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE\n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *\n * Modifications made by Cesium GS, Inc.\n */\n//This file is automatically rebuilt by the Cesium build process.\nvar _default = \"/**\\n\\\n * @license\\n\\\n * Copyright (c) 2000-2005, Sean O'Neil (s_p_oneil@hotmail.com)\\n\\\n * All rights reserved.\\n\\\n *\\n\\\n * Redistribution and use in source and binary forms, with or without\\n\\\n * modification, are permitted provided that the following conditions\\n\\\n * are met:\\n\\\n *\\n\\\n * * Redistributions of source code must retain the above copyright notice,\\n\\\n *   this list of conditions and the following disclaimer.\\n\\\n * * Redistributions in binary form must reproduce the above copyright notice,\\n\\\n *   this list of conditions and the following disclaimer in the documentation\\n\\\n *   and/or other materials provided with the distribution.\\n\\\n * * Neither the name of the project nor the names of its contributors may be\\n\\\n *   used to endorse or promote products derived from this software without\\n\\\n *   specific prior written permission.\\n\\\n *\\n\\\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \\\"AS IS\\\"\\n\\\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\\n\\\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\\n\\\n * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE\\n\\\n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\\n\\\n * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\\n\\\n * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\\n\\\n * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\\n\\\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\\n\\\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\\n\\\n *\\n\\\n * Modifications made by Cesium GS, Inc.\\n\\\n */\\n\\\n\\n\\\n // Code:  http://sponeil.net/\\n\\\n // GPU Gems 2 Article:  https://developer.nvidia.com/gpugems/GPUGems2/gpugems2_chapter16.html\\n\\\n\\n\\\nconst float Kr = 0.0025;\\n\\\nconst float Kr4PI = Kr * 4.0 * czm_pi;\\n\\\nconst float Km = 0.0015;\\n\\\nconst float Km4PI = Km * 4.0 * czm_pi;\\n\\\nconst float ESun = 15.0;\\n\\\nconst float KmESun = Km * ESun;\\n\\\nconst float KrESun = Kr * ESun;\\n\\\nconst vec3 InvWavelength = vec3(\\n\\\n    5.60204474633241,  // Red = 1.0 / Math.pow(0.650, 4.0)\\n\\\n    9.473284437923038, // Green = 1.0 / Math.pow(0.570, 4.0)\\n\\\n    19.643802610477206); // Blue = 1.0 / Math.pow(0.475, 4.0)\\n\\\nconst float rayleighScaleDepth = 0.25;\\n\\\n\\n\\\nconst int nSamples = 2;\\n\\\nconst float fSamples = 2.0;\\n\\\n\\n\\\nconst float g = -0.95;\\n\\\nconst float g2 = g * g;\\n\\\n\\n\\\n#ifdef COLOR_CORRECT\\n\\\nuniform vec3 u_hsbShift; // Hue, saturation, brightness\\n\\\n#endif\\n\\\n\\n\\\nuniform vec3 u_radiiAndDynamicAtmosphereColor; // outer radius, inner radius, dynamic atmosphere color flag\\n\\\n\\n\\\nfloat scale(float cosAngle)\\n\\\n{\\n\\\n    float x = 1.0 - cosAngle;\\n\\\n    return rayleighScaleDepth  * exp(-0.00287 + x*(0.459 + x*(3.83 + x*(-6.80 + x*5.25))));\\n\\\n}\\n\\\n\\n\\\nvec3 getLightDirection(vec3 positionWC)\\n\\\n{\\n\\\n    float lightEnum = u_radiiAndDynamicAtmosphereColor.z;\\n\\\n    vec3 lightDirection =\\n\\\n        positionWC * float(lightEnum == 0.0) +\\n\\\n        czm_lightDirectionWC * float(lightEnum == 1.0) +\\n\\\n        czm_sunDirectionWC * float(lightEnum == 2.0);\\n\\\n    return normalize(lightDirection);\\n\\\n}\\n\\\n\\n\\\nvoid calculateRayScatteringFromSpace(in vec3 positionWC, in vec3 ray, in float innerRadius, in float outerRadius, inout float far, out vec3 start, out float startOffset)\\n\\\n{\\n\\\n    // Calculate the closest intersection of the ray with the outer atmosphere (which is the near point of the ray passing through the atmosphere)\\n\\\n    float cameraHeight = length(positionWC);\\n\\\n    float B = 2.0 * dot(positionWC, ray);\\n\\\n    float C = cameraHeight * cameraHeight - outerRadius * outerRadius;\\n\\\n    float det = max(0.0, B * B - 4.0 * C);\\n\\\n    float near = 0.5 * (-B - sqrt(det));\\n\\\n\\n\\\n    // Calculate the ray's starting position, then calculate its scattering offset\\n\\\n    start = positionWC + ray * near;\\n\\\n    far -= near;\\n\\\n    float startAngle = dot(ray, start) / outerRadius;\\n\\\n    float startDepth = exp(-1.0 / rayleighScaleDepth);\\n\\\n    startOffset = startDepth * scale(startAngle);\\n\\\n}\\n\\\n\\n\\\nvoid calculateRayScatteringFromGround(in vec3 positionWC, in vec3 ray, in float atmosphereScale, in float innerRadius, out vec3 start, out float startOffset)\\n\\\n{\\n\\\n    // Calculate the ray's starting position, then calculate its scattering offset\\n\\\n    float cameraHeight = length(positionWC);\\n\\\n    start = positionWC;\\n\\\n    float height = length(start);\\n\\\n    float depth = exp((atmosphereScale / rayleighScaleDepth ) * (innerRadius - cameraHeight));\\n\\\n    float startAngle = dot(ray, start) / height;\\n\\\n    startOffset = depth*scale(startAngle);\\n\\\n}\\n\\\n\\n\\\nczm_raySegment rayEllipsoidIntersection(czm_ray ray, vec3 inverseRadii)\\n\\\n{\\n\\\n    vec3 o = inverseRadii * (czm_inverseView * vec4(ray.origin, 1.0)).xyz;\\n\\\n    vec3 d = inverseRadii * (czm_inverseView * vec4(ray.direction, 0.0)).xyz;\\n\\\n\\n\\\n    float a = dot(d, d);\\n\\\n    float b = dot(d, o);\\n\\\n    float c = dot(o, o) - 1.0;\\n\\\n    float discriminant = b * b - a * c;\\n\\\n    if (discriminant < 0.0)\\n\\\n    {\\n\\\n        return czm_emptyRaySegment;\\n\\\n    }\\n\\\n    discriminant = sqrt(discriminant);\\n\\\n    float t1 = (-b - discriminant) / a;\\n\\\n    float t2 = (-b + discriminant) / a;\\n\\\n\\n\\\n    if (t1 < 0.0 && t2 < 0.0)\\n\\\n    {\\n\\\n        return czm_emptyRaySegment;\\n\\\n    }\\n\\\n\\n\\\n    if (t1 < 0.0 && t2 >= 0.0)\\n\\\n    {\\n\\\n        t1 = 0.0;\\n\\\n    }\\n\\\n\\n\\\n    return czm_raySegment(t1, t2);\\n\\\n}\\n\\\n\\n\\\nvec3 getAdjustedPosition(vec3 positionWC, float innerRadius)\\n\\\n{\\n\\\n  // Adjust the camera position so that atmosphere color looks the same wherever the eye height is the same\\n\\\n  float cameraHeight = czm_eyeHeight + innerRadius;\\n\\\n  return normalize(positionWC) * cameraHeight;\\n\\\n}\\n\\\n\\n\\\nvec3 getTranslucentPosition(vec3 positionWC, vec3 outerPositionWC, float innerRadius, out bool intersectsEllipsoid)\\n\\\n{\\n\\\n    vec3 directionWC = normalize(outerPositionWC - positionWC);\\n\\\n    vec3 directionEC = czm_viewRotation * directionWC;\\n\\\n    czm_ray viewRay = czm_ray(vec3(0.0), directionEC);\\n\\\n    czm_raySegment raySegment = rayEllipsoidIntersection(viewRay, czm_ellipsoidInverseRadii);\\n\\\n    intersectsEllipsoid = raySegment.start >= 0.0;\\n\\\n\\n\\\n    if (intersectsEllipsoid)\\n\\\n    {\\n\\\n        return positionWC + raySegment.stop * directionWC;\\n\\\n    }\\n\\\n\\n\\\n    return getAdjustedPosition(positionWC, innerRadius);\\n\\\n}\\n\\\n\\n\\\nvoid calculateMieColorAndRayleighColor(vec3 outerPositionWC, out vec3 mieColor, out vec3 rayleighColor)\\n\\\n{\\n\\\n    // Unpack attributes\\n\\\n    float outerRadius = u_radiiAndDynamicAtmosphereColor.x;\\n\\\n    float innerRadius = u_radiiAndDynamicAtmosphereColor.y;\\n\\\n\\n\\\n#ifdef GLOBE_TRANSLUCENT\\n\\\n    bool intersectsEllipsoid = false;\\n\\\n    vec3 startPositionWC = getTranslucentPosition(czm_viewerPositionWC, outerPositionWC, innerRadius, intersectsEllipsoid);\\n\\\n#else\\n\\\n    vec3 startPositionWC = getAdjustedPosition(czm_viewerPositionWC, innerRadius);\\n\\\n#endif\\n\\\n\\n\\\n    vec3 lightDirection = getLightDirection(startPositionWC);\\n\\\n\\n\\\n    // Get the ray from the start position to the outer position and its length (which is the far point of the ray passing through the atmosphere)\\n\\\n    vec3 ray = outerPositionWC - startPositionWC;\\n\\\n    float far = length(ray);\\n\\\n    ray /= far;\\n\\\n\\n\\\n    float atmosphereScale = 1.0 / (outerRadius - innerRadius);\\n\\\n\\n\\\n    vec3 start;\\n\\\n    float startOffset;\\n\\\n\\n\\\n#ifdef SKY_FROM_SPACE\\n\\\n#ifdef GLOBE_TRANSLUCENT\\n\\\n    if (intersectsEllipsoid)\\n\\\n    {\\n\\\n        calculateRayScatteringFromGround(startPositionWC, ray, atmosphereScale, innerRadius, start, startOffset);\\n\\\n    }\\n\\\n    else\\n\\\n    {\\n\\\n        calculateRayScatteringFromSpace(startPositionWC, ray, innerRadius, outerRadius, far, start, startOffset);\\n\\\n    }\\n\\\n#else\\n\\\n    calculateRayScatteringFromSpace(startPositionWC, ray, innerRadius, outerRadius, far, start, startOffset);\\n\\\n#endif\\n\\\n#else\\n\\\n    calculateRayScatteringFromGround(startPositionWC, ray, atmosphereScale, innerRadius, start, startOffset);\\n\\\n#endif\\n\\\n\\n\\\n    // Initialize the scattering loop variables\\n\\\n    float sampleLength = far / fSamples;\\n\\\n    float scaledLength = sampleLength * atmosphereScale;\\n\\\n    vec3 sampleRay = ray * sampleLength;\\n\\\n    vec3 samplePoint = start + sampleRay * 0.5;\\n\\\n\\n\\\n    // Now loop through the sample rays\\n\\\n    vec3 frontColor = vec3(0.0, 0.0, 0.0);\\n\\\n\\n\\\n    for (int i = 0; i<nSamples; i++)\\n\\\n    {\\n\\\n        float height = length(samplePoint);\\n\\\n        float depth = exp((atmosphereScale / rayleighScaleDepth ) * (innerRadius - height));\\n\\\n        float fLightAngle = dot(lightDirection, samplePoint) / height;\\n\\\n        float fCameraAngle = dot(ray, samplePoint) / height;\\n\\\n        float fScatter = (startOffset + depth*(scale(fLightAngle) - scale(fCameraAngle)));\\n\\\n        vec3 attenuate = exp(-fScatter * (InvWavelength * Kr4PI + Km4PI));\\n\\\n        frontColor += attenuate * (depth * scaledLength);\\n\\\n        samplePoint += sampleRay;\\n\\\n    }\\n\\\n\\n\\\n    // Finally, scale the Mie and Rayleigh colors and set up the varying variables for the pixel shader\\n\\\n    mieColor = frontColor * KmESun;\\n\\\n    rayleighColor = frontColor * (InvWavelength * KrESun);\\n\\\n\\n\\\n    // Cap mie and rayleigh colors to prevent NaNs when vertex interpolation happens\\n\\\n    mieColor = min(mieColor, vec3(10000000.0));\\n\\\n    rayleighColor = min(rayleighColor, vec3(10000000.0));\\n\\\n}\\n\\\n\\n\\\nvec4 calculateFinalColor(vec3 positionWC, vec3 toCamera, vec3 lightDirection, vec3 mieColor, vec3 rayleighColor)\\n\\\n{\\n\\\n    // Extra normalize added for Android\\n\\\n    float cosAngle = dot(lightDirection, normalize(toCamera)) / length(toCamera);\\n\\\n    float rayleighPhase = 0.75 * (1.0 + cosAngle * cosAngle);\\n\\\n    float miePhase = 1.5 * ((1.0 - g2) / (2.0 + g2)) * (1.0 + cosAngle * cosAngle) / pow(1.0 + g2 - 2.0 * g * cosAngle, 1.5);\\n\\\n\\n\\\n    vec3 rgb = rayleighPhase * rayleighColor + miePhase * mieColor;\\n\\\n\\n\\\n    const float exposure = 2.0;\\n\\\n    vec3 rgbExposure = vec3(1.0) - exp(-exposure * rgb);\\n\\\n\\n\\\n#ifndef HDR\\n\\\n    rgb = rgbExposure;\\n\\\n#endif\\n\\\n\\n\\\n#ifdef COLOR_CORRECT\\n\\\n    // Convert rgb color to hsb\\n\\\n    vec3 hsb = czm_RGBToHSB(rgb);\\n\\\n    // Perform hsb shift\\n\\\n    hsb.x += u_hsbShift.x; // hue\\n\\\n    hsb.y = clamp(hsb.y + u_hsbShift.y, 0.0, 1.0); // saturation\\n\\\n    hsb.z = hsb.z > czm_epsilon7 ? hsb.z + u_hsbShift.z : 0.0; // brightness\\n\\\n    // Convert shifted hsb back to rgb\\n\\\n    rgb = czm_HSBToRGB(hsb);\\n\\\n#endif\\n\\\n\\n\\\n    float outerRadius = u_radiiAndDynamicAtmosphereColor.x;\\n\\\n    float innerRadius = u_radiiAndDynamicAtmosphereColor.y;\\n\\\n    float lightEnum = u_radiiAndDynamicAtmosphereColor.z;\\n\\\n\\n\\\n    float cameraHeight = czm_eyeHeight + innerRadius;\\n\\\n\\n\\\n    // Alter alpha based on how close the viewer is to the ground (1.0 = on ground, 0.0 = at edge of atmosphere)\\n\\\n    float atmosphereAlpha = clamp((outerRadius - cameraHeight) / (outerRadius - innerRadius), 0.0, 1.0);\\n\\\n\\n\\\n    // Alter alpha based on time of day (0.0 = night , 1.0 = day)\\n\\\n    float nightAlpha = (lightEnum != 0.0) ? clamp(dot(normalize(positionWC), lightDirection), 0.0, 1.0) : 1.0;\\n\\\n    atmosphereAlpha *= pow(nightAlpha, 0.5);\\n\\\n\\n\\\n    vec4 finalColor = vec4(rgb, mix(clamp(rgbExposure.b, 0.0, 1.0), 1.0, atmosphereAlpha) * smoothstep(0.0, 1.0, czm_morphTime));\\n\\\n\\n\\\n    if (mieColor.b > 1.0)\\n\\\n    {\\n\\\n        // Fade atmosphere below the ellipsoid. As the camera zooms further away from the ellipsoid draw\\n\\\n        // a larger atmosphere ring to cover empty space of lower LOD globe tiles.\\n\\\n        float strength = mieColor.b;\\n\\\n        float minDistance = outerRadius;\\n\\\n        float maxDistance = outerRadius * 3.0;\\n\\\n        float maxStrengthLerp = 1.0 - clamp((maxDistance - cameraHeight) / (maxDistance - minDistance), 0.0, 1.0);\\n\\\n        float maxStrength = mix(100.0, 10000.0, maxStrengthLerp);\\n\\\n        strength = min(strength, maxStrength);\\n\\\n        float alpha = 1.0 - (strength / maxStrength);\\n\\\n        finalColor.a = alpha;\\n\\\n    }\\n\\\n\\n\\\n    return finalColor;\\n\\\n}\\n\\\n\";\nexports.default = _default;"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":8,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":1,"column":0}},{"generated":{"line":9,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":2,"column":0}},{"generated":{"line":10,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":3,"column":0}},{"generated":{"line":11,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":4,"column":0}},{"generated":{"line":12,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":5,"column":0}},{"generated":{"line":13,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":6,"column":0}},{"generated":{"line":14,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":7,"column":0}},{"generated":{"line":15,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":8,"column":0}},{"generated":{"line":16,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":9,"column":0}},{"generated":{"line":17,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":10,"column":0}},{"generated":{"line":18,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":11,"column":0}},{"generated":{"line":19,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":12,"column":0}},{"generated":{"line":20,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":13,"column":0}},{"generated":{"line":21,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":14,"column":0}},{"generated":{"line":22,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":15,"column":0}},{"generated":{"line":23,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":16,"column":0}},{"generated":{"line":24,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":17,"column":0}},{"generated":{"line":25,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":18,"column":0}},{"generated":{"line":26,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":19,"column":0}},{"generated":{"line":27,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":20,"column":0}},{"generated":{"line":28,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":21,"column":0}},{"generated":{"line":29,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":22,"column":0}},{"generated":{"line":30,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":23,"column":0}},{"generated":{"line":31,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":24,"column":0}},{"generated":{"line":32,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":25,"column":0}},{"generated":{"line":33,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":26,"column":0}},{"generated":{"line":34,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":27,"column":0}},{"generated":{"line":35,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":28,"column":0}},{"generated":{"line":36,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":29,"column":0}},{"generated":{"line":37,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":30,"column":0}},{"generated":{"line":38,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":31,"column":0}},{"generated":{"line":39,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":32,"column":0}},{"generated":{"line":40,"column":15},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":33,"column":15}},{"generated":{"line":41,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":34,"column":0}},{"generated":{"line":42,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":35,"column":0}},{"generated":{"line":43,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":36,"column":0}},{"generated":{"line":44,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":37,"column":0}},{"generated":{"line":45,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":38,"column":0}},{"generated":{"line":46,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":39,"column":0}},{"generated":{"line":47,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":40,"column":0}},{"generated":{"line":48,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":41,"column":0}},{"generated":{"line":49,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":42,"column":0}},{"generated":{"line":50,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":43,"column":0}},{"generated":{"line":51,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":44,"column":0}},{"generated":{"line":52,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":45,"column":0}},{"generated":{"line":53,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":46,"column":0}},{"generated":{"line":54,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":47,"column":0}},{"generated":{"line":55,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":48,"column":0}},{"generated":{"line":56,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":49,"column":0}},{"generated":{"line":57,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":50,"column":0}},{"generated":{"line":58,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":51,"column":0}},{"generated":{"line":59,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":52,"column":0}},{"generated":{"line":60,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":53,"column":0}},{"generated":{"line":61,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":54,"column":0}},{"generated":{"line":62,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":55,"column":0}},{"generated":{"line":63,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":56,"column":0}},{"generated":{"line":64,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":57,"column":0}},{"generated":{"line":65,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":58,"column":0}},{"generated":{"line":66,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":59,"column":0}},{"generated":{"line":67,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":60,"column":0}},{"generated":{"line":68,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":61,"column":0}},{"generated":{"line":69,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":62,"column":0}},{"generated":{"line":70,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":63,"column":0}},{"generated":{"line":71,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":64,"column":0}},{"generated":{"line":72,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":65,"column":0}},{"generated":{"line":73,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":66,"column":0}},{"generated":{"line":74,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":67,"column":0}},{"generated":{"line":75,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":68,"column":0}},{"generated":{"line":76,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":69,"column":0}},{"generated":{"line":77,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":70,"column":0}},{"generated":{"line":78,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":71,"column":0}},{"generated":{"line":79,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":72,"column":0}},{"generated":{"line":80,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":73,"column":0}},{"generated":{"line":81,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":74,"column":0}},{"generated":{"line":82,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":75,"column":0}},{"generated":{"line":83,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":76,"column":0}},{"generated":{"line":84,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":77,"column":0}},{"generated":{"line":85,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":78,"column":0}},{"generated":{"line":86,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":79,"column":0}},{"generated":{"line":87,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":80,"column":0}},{"generated":{"line":88,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":81,"column":0}},{"generated":{"line":89,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":82,"column":0}},{"generated":{"line":90,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":83,"column":0}},{"generated":{"line":91,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":84,"column":0}},{"generated":{"line":92,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":85,"column":0}},{"generated":{"line":93,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":86,"column":0}},{"generated":{"line":94,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":87,"column":0}},{"generated":{"line":95,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":88,"column":0}},{"generated":{"line":96,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":89,"column":0}},{"generated":{"line":97,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":90,"column":0}},{"generated":{"line":98,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":91,"column":0}},{"generated":{"line":99,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":92,"column":0}},{"generated":{"line":100,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":93,"column":0}},{"generated":{"line":101,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":94,"column":0}},{"generated":{"line":102,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":95,"column":0}},{"generated":{"line":103,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":96,"column":0}},{"generated":{"line":104,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":97,"column":0}},{"generated":{"line":105,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":98,"column":0}},{"generated":{"line":106,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":99,"column":0}},{"generated":{"line":107,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":100,"column":0}},{"generated":{"line":108,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":101,"column":0}},{"generated":{"line":109,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":102,"column":0}},{"generated":{"line":110,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":103,"column":0}},{"generated":{"line":111,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":104,"column":0}},{"generated":{"line":112,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":105,"column":0}},{"generated":{"line":113,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":106,"column":0}},{"generated":{"line":114,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":107,"column":0}},{"generated":{"line":115,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":108,"column":0}},{"generated":{"line":116,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":109,"column":0}},{"generated":{"line":117,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":110,"column":0}},{"generated":{"line":118,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":111,"column":0}},{"generated":{"line":119,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":112,"column":0}},{"generated":{"line":120,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":113,"column":0}},{"generated":{"line":121,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":114,"column":0}},{"generated":{"line":122,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":115,"column":0}},{"generated":{"line":123,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":116,"column":0}},{"generated":{"line":124,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":117,"column":0}},{"generated":{"line":125,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":118,"column":0}},{"generated":{"line":126,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":119,"column":0}},{"generated":{"line":127,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":120,"column":0}},{"generated":{"line":128,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":121,"column":0}},{"generated":{"line":129,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":122,"column":0}},{"generated":{"line":130,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":123,"column":0}},{"generated":{"line":131,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":124,"column":0}},{"generated":{"line":132,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":125,"column":0}},{"generated":{"line":133,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":126,"column":0}},{"generated":{"line":134,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":127,"column":0}},{"generated":{"line":135,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":128,"column":0}},{"generated":{"line":136,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":129,"column":0}},{"generated":{"line":137,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":130,"column":0}},{"generated":{"line":138,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":131,"column":0}},{"generated":{"line":139,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":132,"column":0}},{"generated":{"line":140,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":133,"column":0}},{"generated":{"line":141,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":134,"column":0}},{"generated":{"line":142,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":135,"column":0}},{"generated":{"line":143,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":136,"column":0}},{"generated":{"line":144,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":137,"column":0}},{"generated":{"line":145,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":138,"column":0}},{"generated":{"line":146,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":139,"column":0}},{"generated":{"line":147,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":140,"column":0}},{"generated":{"line":148,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":141,"column":0}},{"generated":{"line":149,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":142,"column":0}},{"generated":{"line":150,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":143,"column":0}},{"generated":{"line":151,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":144,"column":0}},{"generated":{"line":152,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":145,"column":0}},{"generated":{"line":153,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":146,"column":0}},{"generated":{"line":154,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":147,"column":0}},{"generated":{"line":155,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":148,"column":0}},{"generated":{"line":156,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":149,"column":0}},{"generated":{"line":157,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":150,"column":0}},{"generated":{"line":158,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":151,"column":0}},{"generated":{"line":159,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":152,"column":0}},{"generated":{"line":160,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":153,"column":0}},{"generated":{"line":161,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":154,"column":0}},{"generated":{"line":162,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":155,"column":0}},{"generated":{"line":163,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":156,"column":0}},{"generated":{"line":164,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":157,"column":0}},{"generated":{"line":165,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":158,"column":0}},{"generated":{"line":166,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":159,"column":0}},{"generated":{"line":167,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":160,"column":0}},{"generated":{"line":168,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":161,"column":0}},{"generated":{"line":169,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":162,"column":0}},{"generated":{"line":170,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":163,"column":0}},{"generated":{"line":171,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":164,"column":0}},{"generated":{"line":172,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":165,"column":0}},{"generated":{"line":173,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":166,"column":0}},{"generated":{"line":174,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":167,"column":0}},{"generated":{"line":175,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":168,"column":0}},{"generated":{"line":176,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":169,"column":0}},{"generated":{"line":177,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":170,"column":0}},{"generated":{"line":178,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":171,"column":0}},{"generated":{"line":179,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":172,"column":0}},{"generated":{"line":180,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":173,"column":0}},{"generated":{"line":181,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":174,"column":0}},{"generated":{"line":182,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":175,"column":0}},{"generated":{"line":183,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":176,"column":0}},{"generated":{"line":184,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":177,"column":0}},{"generated":{"line":185,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":178,"column":0}},{"generated":{"line":186,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":179,"column":0}},{"generated":{"line":187,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":180,"column":0}},{"generated":{"line":188,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":181,"column":0}},{"generated":{"line":189,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":182,"column":0}},{"generated":{"line":190,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":183,"column":0}},{"generated":{"line":191,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":184,"column":0}},{"generated":{"line":192,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":185,"column":0}},{"generated":{"line":193,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":186,"column":0}},{"generated":{"line":194,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":187,"column":0}},{"generated":{"line":195,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":188,"column":0}},{"generated":{"line":196,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":189,"column":0}},{"generated":{"line":197,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":190,"column":0}},{"generated":{"line":198,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":191,"column":0}},{"generated":{"line":199,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":192,"column":0}},{"generated":{"line":200,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":193,"column":0}},{"generated":{"line":201,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":194,"column":0}},{"generated":{"line":202,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":195,"column":0}},{"generated":{"line":203,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":196,"column":0}},{"generated":{"line":204,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":197,"column":0}},{"generated":{"line":205,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":198,"column":0}},{"generated":{"line":206,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":199,"column":0}},{"generated":{"line":207,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":200,"column":0}},{"generated":{"line":208,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":201,"column":0}},{"generated":{"line":209,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":202,"column":0}},{"generated":{"line":210,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":203,"column":0}},{"generated":{"line":211,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":204,"column":0}},{"generated":{"line":212,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":205,"column":0}},{"generated":{"line":213,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":206,"column":0}},{"generated":{"line":214,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":207,"column":0}},{"generated":{"line":215,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":208,"column":0}},{"generated":{"line":216,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":209,"column":0}},{"generated":{"line":217,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":210,"column":0}},{"generated":{"line":218,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":211,"column":0}},{"generated":{"line":219,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":212,"column":0}},{"generated":{"line":220,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":213,"column":0}},{"generated":{"line":221,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":214,"column":0}},{"generated":{"line":222,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":215,"column":0}},{"generated":{"line":223,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":216,"column":0}},{"generated":{"line":224,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":217,"column":0}},{"generated":{"line":225,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":218,"column":0}},{"generated":{"line":226,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":219,"column":0}},{"generated":{"line":227,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":220,"column":0}},{"generated":{"line":228,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":221,"column":0}},{"generated":{"line":229,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":222,"column":0}},{"generated":{"line":230,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":223,"column":0}},{"generated":{"line":231,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":224,"column":0}},{"generated":{"line":232,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":225,"column":0}},{"generated":{"line":233,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":226,"column":0}},{"generated":{"line":234,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":227,"column":0}},{"generated":{"line":235,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":228,"column":0}},{"generated":{"line":236,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":229,"column":0}},{"generated":{"line":237,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":230,"column":0}},{"generated":{"line":238,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":231,"column":0}},{"generated":{"line":239,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":232,"column":0}},{"generated":{"line":240,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":233,"column":0}},{"generated":{"line":241,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":234,"column":0}},{"generated":{"line":242,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":235,"column":0}},{"generated":{"line":243,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":236,"column":0}},{"generated":{"line":244,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":237,"column":0}},{"generated":{"line":245,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":238,"column":0}},{"generated":{"line":246,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":239,"column":0}},{"generated":{"line":247,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":240,"column":0}},{"generated":{"line":248,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":241,"column":0}},{"generated":{"line":249,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":242,"column":0}},{"generated":{"line":250,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":243,"column":0}},{"generated":{"line":251,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":244,"column":0}},{"generated":{"line":252,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":245,"column":0}},{"generated":{"line":253,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":246,"column":0}},{"generated":{"line":254,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":247,"column":0}},{"generated":{"line":255,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":248,"column":0}},{"generated":{"line":256,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":249,"column":0}},{"generated":{"line":257,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":250,"column":0}},{"generated":{"line":258,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":251,"column":0}},{"generated":{"line":259,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":252,"column":0}},{"generated":{"line":260,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":253,"column":0}},{"generated":{"line":261,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":254,"column":0}},{"generated":{"line":262,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":255,"column":0}},{"generated":{"line":263,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":256,"column":0}},{"generated":{"line":264,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":257,"column":0}},{"generated":{"line":265,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":258,"column":0}},{"generated":{"line":266,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":259,"column":0}},{"generated":{"line":267,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":260,"column":0}},{"generated":{"line":268,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":261,"column":0}},{"generated":{"line":269,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":262,"column":0}},{"generated":{"line":270,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":263,"column":0}},{"generated":{"line":271,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":264,"column":0}},{"generated":{"line":272,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":265,"column":0}},{"generated":{"line":273,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":266,"column":0}},{"generated":{"line":274,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":267,"column":0}},{"generated":{"line":275,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":268,"column":0}},{"generated":{"line":276,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":269,"column":0}},{"generated":{"line":277,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":270,"column":0}},{"generated":{"line":278,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":271,"column":0}},{"generated":{"line":279,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":272,"column":0}},{"generated":{"line":280,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":273,"column":0}},{"generated":{"line":281,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":274,"column":0}},{"generated":{"line":282,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":275,"column":0}},{"generated":{"line":283,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":276,"column":0}},{"generated":{"line":284,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":277,"column":0}},{"generated":{"line":285,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":278,"column":0}},{"generated":{"line":286,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":279,"column":0}},{"generated":{"line":287,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":280,"column":0}},{"generated":{"line":288,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":281,"column":0}},{"generated":{"line":289,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":282,"column":0}},{"generated":{"line":290,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":283,"column":0}},{"generated":{"line":291,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":284,"column":0}},{"generated":{"line":292,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":285,"column":0}},{"generated":{"line":293,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":286,"column":0}},{"generated":{"line":294,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":287,"column":0}},{"generated":{"line":295,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":288,"column":0}},{"generated":{"line":296,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":289,"column":0}},{"generated":{"line":297,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":290,"column":0}},{"generated":{"line":298,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":291,"column":0}},{"generated":{"line":299,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":292,"column":0}},{"generated":{"line":300,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":293,"column":0}},{"generated":{"line":301,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":294,"column":0}},{"generated":{"line":302,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":295,"column":0}},{"generated":{"line":303,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":296,"column":0}},{"generated":{"line":304,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":297,"column":0}},{"generated":{"line":305,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":298,"column":0}},{"generated":{"line":306,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":299,"column":0}},{"generated":{"line":307,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":300,"column":0}},{"generated":{"line":308,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":301,"column":0}},{"generated":{"line":309,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":302,"column":0}},{"generated":{"line":310,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":303,"column":0}},{"generated":{"line":311,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":304,"column":0}},{"generated":{"line":312,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":305,"column":0}},{"generated":{"line":313,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":306,"column":0}},{"generated":{"line":314,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":307,"column":0}},{"generated":{"line":315,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":308,"column":0}},{"generated":{"line":316,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":309,"column":0}},{"generated":{"line":317,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":310,"column":0}},{"generated":{"line":318,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":311,"column":0}},{"generated":{"line":319,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":312,"column":0}},{"generated":{"line":320,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":313,"column":0}},{"generated":{"line":321,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":314,"column":0}},{"generated":{"line":322,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":315,"column":0}},{"generated":{"line":323,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":316,"column":0}},{"generated":{"line":324,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":317,"column":0}},{"generated":{"line":325,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":318,"column":0}},{"generated":{"line":326,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":319,"column":0}},{"generated":{"line":327,"column":0},"source":"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":320,"column":0}}],"sources":{"node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js":"/**\n * @license\n * Copyright (c) 2000-2005, Sean O'Neil (s_p_oneil@hotmail.com)\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n *\n * * Redistributions of source code must retain the above copyright notice,\n *   this list of conditions and the following disclaimer.\n * * Redistributions in binary form must reproduce the above copyright notice,\n *   this list of conditions and the following disclaimer in the documentation\n *   and/or other materials provided with the distribution.\n * * Neither the name of the project nor the names of its contributors may be\n *   used to endorse or promote products derived from this software without\n *   specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE\n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *\n * Modifications made by Cesium GS, Inc.\n */\n//This file is automatically rebuilt by the Cesium build process.\nexport default \"/**\\n\\\n * @license\\n\\\n * Copyright (c) 2000-2005, Sean O'Neil (s_p_oneil@hotmail.com)\\n\\\n * All rights reserved.\\n\\\n *\\n\\\n * Redistribution and use in source and binary forms, with or without\\n\\\n * modification, are permitted provided that the following conditions\\n\\\n * are met:\\n\\\n *\\n\\\n * * Redistributions of source code must retain the above copyright notice,\\n\\\n *   this list of conditions and the following disclaimer.\\n\\\n * * Redistributions in binary form must reproduce the above copyright notice,\\n\\\n *   this list of conditions and the following disclaimer in the documentation\\n\\\n *   and/or other materials provided with the distribution.\\n\\\n * * Neither the name of the project nor the names of its contributors may be\\n\\\n *   used to endorse or promote products derived from this software without\\n\\\n *   specific prior written permission.\\n\\\n *\\n\\\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \\\"AS IS\\\"\\n\\\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\\n\\\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\\n\\\n * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE\\n\\\n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\\n\\\n * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\\n\\\n * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\\n\\\n * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\\n\\\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\\n\\\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\\n\\\n *\\n\\\n * Modifications made by Cesium GS, Inc.\\n\\\n */\\n\\\n\\n\\\n // Code:  http://sponeil.net/\\n\\\n // GPU Gems 2 Article:  https://developer.nvidia.com/gpugems/GPUGems2/gpugems2_chapter16.html\\n\\\n\\n\\\nconst float Kr = 0.0025;\\n\\\nconst float Kr4PI = Kr * 4.0 * czm_pi;\\n\\\nconst float Km = 0.0015;\\n\\\nconst float Km4PI = Km * 4.0 * czm_pi;\\n\\\nconst float ESun = 15.0;\\n\\\nconst float KmESun = Km * ESun;\\n\\\nconst float KrESun = Kr * ESun;\\n\\\nconst vec3 InvWavelength = vec3(\\n\\\n    5.60204474633241,  // Red = 1.0 / Math.pow(0.650, 4.0)\\n\\\n    9.473284437923038, // Green = 1.0 / Math.pow(0.570, 4.0)\\n\\\n    19.643802610477206); // Blue = 1.0 / Math.pow(0.475, 4.0)\\n\\\nconst float rayleighScaleDepth = 0.25;\\n\\\n\\n\\\nconst int nSamples = 2;\\n\\\nconst float fSamples = 2.0;\\n\\\n\\n\\\nconst float g = -0.95;\\n\\\nconst float g2 = g * g;\\n\\\n\\n\\\n#ifdef COLOR_CORRECT\\n\\\nuniform vec3 u_hsbShift; // Hue, saturation, brightness\\n\\\n#endif\\n\\\n\\n\\\nuniform vec3 u_radiiAndDynamicAtmosphereColor; // outer radius, inner radius, dynamic atmosphere color flag\\n\\\n\\n\\\nfloat scale(float cosAngle)\\n\\\n{\\n\\\n    float x = 1.0 - cosAngle;\\n\\\n    return rayleighScaleDepth  * exp(-0.00287 + x*(0.459 + x*(3.83 + x*(-6.80 + x*5.25))));\\n\\\n}\\n\\\n\\n\\\nvec3 getLightDirection(vec3 positionWC)\\n\\\n{\\n\\\n    float lightEnum = u_radiiAndDynamicAtmosphereColor.z;\\n\\\n    vec3 lightDirection =\\n\\\n        positionWC * float(lightEnum == 0.0) +\\n\\\n        czm_lightDirectionWC * float(lightEnum == 1.0) +\\n\\\n        czm_sunDirectionWC * float(lightEnum == 2.0);\\n\\\n    return normalize(lightDirection);\\n\\\n}\\n\\\n\\n\\\nvoid calculateRayScatteringFromSpace(in vec3 positionWC, in vec3 ray, in float innerRadius, in float outerRadius, inout float far, out vec3 start, out float startOffset)\\n\\\n{\\n\\\n    // Calculate the closest intersection of the ray with the outer atmosphere (which is the near point of the ray passing through the atmosphere)\\n\\\n    float cameraHeight = length(positionWC);\\n\\\n    float B = 2.0 * dot(positionWC, ray);\\n\\\n    float C = cameraHeight * cameraHeight - outerRadius * outerRadius;\\n\\\n    float det = max(0.0, B * B - 4.0 * C);\\n\\\n    float near = 0.5 * (-B - sqrt(det));\\n\\\n\\n\\\n    // Calculate the ray's starting position, then calculate its scattering offset\\n\\\n    start = positionWC + ray * near;\\n\\\n    far -= near;\\n\\\n    float startAngle = dot(ray, start) / outerRadius;\\n\\\n    float startDepth = exp(-1.0 / rayleighScaleDepth);\\n\\\n    startOffset = startDepth * scale(startAngle);\\n\\\n}\\n\\\n\\n\\\nvoid calculateRayScatteringFromGround(in vec3 positionWC, in vec3 ray, in float atmosphereScale, in float innerRadius, out vec3 start, out float startOffset)\\n\\\n{\\n\\\n    // Calculate the ray's starting position, then calculate its scattering offset\\n\\\n    float cameraHeight = length(positionWC);\\n\\\n    start = positionWC;\\n\\\n    float height = length(start);\\n\\\n    float depth = exp((atmosphereScale / rayleighScaleDepth ) * (innerRadius - cameraHeight));\\n\\\n    float startAngle = dot(ray, start) / height;\\n\\\n    startOffset = depth*scale(startAngle);\\n\\\n}\\n\\\n\\n\\\nczm_raySegment rayEllipsoidIntersection(czm_ray ray, vec3 inverseRadii)\\n\\\n{\\n\\\n    vec3 o = inverseRadii * (czm_inverseView * vec4(ray.origin, 1.0)).xyz;\\n\\\n    vec3 d = inverseRadii * (czm_inverseView * vec4(ray.direction, 0.0)).xyz;\\n\\\n\\n\\\n    float a = dot(d, d);\\n\\\n    float b = dot(d, o);\\n\\\n    float c = dot(o, o) - 1.0;\\n\\\n    float discriminant = b * b - a * c;\\n\\\n    if (discriminant < 0.0)\\n\\\n    {\\n\\\n        return czm_emptyRaySegment;\\n\\\n    }\\n\\\n    discriminant = sqrt(discriminant);\\n\\\n    float t1 = (-b - discriminant) / a;\\n\\\n    float t2 = (-b + discriminant) / a;\\n\\\n\\n\\\n    if (t1 < 0.0 && t2 < 0.0)\\n\\\n    {\\n\\\n        return czm_emptyRaySegment;\\n\\\n    }\\n\\\n\\n\\\n    if (t1 < 0.0 && t2 >= 0.0)\\n\\\n    {\\n\\\n        t1 = 0.0;\\n\\\n    }\\n\\\n\\n\\\n    return czm_raySegment(t1, t2);\\n\\\n}\\n\\\n\\n\\\nvec3 getAdjustedPosition(vec3 positionWC, float innerRadius)\\n\\\n{\\n\\\n  // Adjust the camera position so that atmosphere color looks the same wherever the eye height is the same\\n\\\n  float cameraHeight = czm_eyeHeight + innerRadius;\\n\\\n  return normalize(positionWC) * cameraHeight;\\n\\\n}\\n\\\n\\n\\\nvec3 getTranslucentPosition(vec3 positionWC, vec3 outerPositionWC, float innerRadius, out bool intersectsEllipsoid)\\n\\\n{\\n\\\n    vec3 directionWC = normalize(outerPositionWC - positionWC);\\n\\\n    vec3 directionEC = czm_viewRotation * directionWC;\\n\\\n    czm_ray viewRay = czm_ray(vec3(0.0), directionEC);\\n\\\n    czm_raySegment raySegment = rayEllipsoidIntersection(viewRay, czm_ellipsoidInverseRadii);\\n\\\n    intersectsEllipsoid = raySegment.start >= 0.0;\\n\\\n\\n\\\n    if (intersectsEllipsoid)\\n\\\n    {\\n\\\n        return positionWC + raySegment.stop * directionWC;\\n\\\n    }\\n\\\n\\n\\\n    return getAdjustedPosition(positionWC, innerRadius);\\n\\\n}\\n\\\n\\n\\\nvoid calculateMieColorAndRayleighColor(vec3 outerPositionWC, out vec3 mieColor, out vec3 rayleighColor)\\n\\\n{\\n\\\n    // Unpack attributes\\n\\\n    float outerRadius = u_radiiAndDynamicAtmosphereColor.x;\\n\\\n    float innerRadius = u_radiiAndDynamicAtmosphereColor.y;\\n\\\n\\n\\\n#ifdef GLOBE_TRANSLUCENT\\n\\\n    bool intersectsEllipsoid = false;\\n\\\n    vec3 startPositionWC = getTranslucentPosition(czm_viewerPositionWC, outerPositionWC, innerRadius, intersectsEllipsoid);\\n\\\n#else\\n\\\n    vec3 startPositionWC = getAdjustedPosition(czm_viewerPositionWC, innerRadius);\\n\\\n#endif\\n\\\n\\n\\\n    vec3 lightDirection = getLightDirection(startPositionWC);\\n\\\n\\n\\\n    // Get the ray from the start position to the outer position and its length (which is the far point of the ray passing through the atmosphere)\\n\\\n    vec3 ray = outerPositionWC - startPositionWC;\\n\\\n    float far = length(ray);\\n\\\n    ray /= far;\\n\\\n\\n\\\n    float atmosphereScale = 1.0 / (outerRadius - innerRadius);\\n\\\n\\n\\\n    vec3 start;\\n\\\n    float startOffset;\\n\\\n\\n\\\n#ifdef SKY_FROM_SPACE\\n\\\n#ifdef GLOBE_TRANSLUCENT\\n\\\n    if (intersectsEllipsoid)\\n\\\n    {\\n\\\n        calculateRayScatteringFromGround(startPositionWC, ray, atmosphereScale, innerRadius, start, startOffset);\\n\\\n    }\\n\\\n    else\\n\\\n    {\\n\\\n        calculateRayScatteringFromSpace(startPositionWC, ray, innerRadius, outerRadius, far, start, startOffset);\\n\\\n    }\\n\\\n#else\\n\\\n    calculateRayScatteringFromSpace(startPositionWC, ray, innerRadius, outerRadius, far, start, startOffset);\\n\\\n#endif\\n\\\n#else\\n\\\n    calculateRayScatteringFromGround(startPositionWC, ray, atmosphereScale, innerRadius, start, startOffset);\\n\\\n#endif\\n\\\n\\n\\\n    // Initialize the scattering loop variables\\n\\\n    float sampleLength = far / fSamples;\\n\\\n    float scaledLength = sampleLength * atmosphereScale;\\n\\\n    vec3 sampleRay = ray * sampleLength;\\n\\\n    vec3 samplePoint = start + sampleRay * 0.5;\\n\\\n\\n\\\n    // Now loop through the sample rays\\n\\\n    vec3 frontColor = vec3(0.0, 0.0, 0.0);\\n\\\n\\n\\\n    for (int i = 0; i<nSamples; i++)\\n\\\n    {\\n\\\n        float height = length(samplePoint);\\n\\\n        float depth = exp((atmosphereScale / rayleighScaleDepth ) * (innerRadius - height));\\n\\\n        float fLightAngle = dot(lightDirection, samplePoint) / height;\\n\\\n        float fCameraAngle = dot(ray, samplePoint) / height;\\n\\\n        float fScatter = (startOffset + depth*(scale(fLightAngle) - scale(fCameraAngle)));\\n\\\n        vec3 attenuate = exp(-fScatter * (InvWavelength * Kr4PI + Km4PI));\\n\\\n        frontColor += attenuate * (depth * scaledLength);\\n\\\n        samplePoint += sampleRay;\\n\\\n    }\\n\\\n\\n\\\n    // Finally, scale the Mie and Rayleigh colors and set up the varying variables for the pixel shader\\n\\\n    mieColor = frontColor * KmESun;\\n\\\n    rayleighColor = frontColor * (InvWavelength * KrESun);\\n\\\n\\n\\\n    // Cap mie and rayleigh colors to prevent NaNs when vertex interpolation happens\\n\\\n    mieColor = min(mieColor, vec3(10000000.0));\\n\\\n    rayleighColor = min(rayleighColor, vec3(10000000.0));\\n\\\n}\\n\\\n\\n\\\nvec4 calculateFinalColor(vec3 positionWC, vec3 toCamera, vec3 lightDirection, vec3 mieColor, vec3 rayleighColor)\\n\\\n{\\n\\\n    // Extra normalize added for Android\\n\\\n    float cosAngle = dot(lightDirection, normalize(toCamera)) / length(toCamera);\\n\\\n    float rayleighPhase = 0.75 * (1.0 + cosAngle * cosAngle);\\n\\\n    float miePhase = 1.5 * ((1.0 - g2) / (2.0 + g2)) * (1.0 + cosAngle * cosAngle) / pow(1.0 + g2 - 2.0 * g * cosAngle, 1.5);\\n\\\n\\n\\\n    vec3 rgb = rayleighPhase * rayleighColor + miePhase * mieColor;\\n\\\n\\n\\\n    const float exposure = 2.0;\\n\\\n    vec3 rgbExposure = vec3(1.0) - exp(-exposure * rgb);\\n\\\n\\n\\\n#ifndef HDR\\n\\\n    rgb = rgbExposure;\\n\\\n#endif\\n\\\n\\n\\\n#ifdef COLOR_CORRECT\\n\\\n    // Convert rgb color to hsb\\n\\\n    vec3 hsb = czm_RGBToHSB(rgb);\\n\\\n    // Perform hsb shift\\n\\\n    hsb.x += u_hsbShift.x; // hue\\n\\\n    hsb.y = clamp(hsb.y + u_hsbShift.y, 0.0, 1.0); // saturation\\n\\\n    hsb.z = hsb.z > czm_epsilon7 ? hsb.z + u_hsbShift.z : 0.0; // brightness\\n\\\n    // Convert shifted hsb back to rgb\\n\\\n    rgb = czm_HSBToRGB(hsb);\\n\\\n#endif\\n\\\n\\n\\\n    float outerRadius = u_radiiAndDynamicAtmosphereColor.x;\\n\\\n    float innerRadius = u_radiiAndDynamicAtmosphereColor.y;\\n\\\n    float lightEnum = u_radiiAndDynamicAtmosphereColor.z;\\n\\\n\\n\\\n    float cameraHeight = czm_eyeHeight + innerRadius;\\n\\\n\\n\\\n    // Alter alpha based on how close the viewer is to the ground (1.0 = on ground, 0.0 = at edge of atmosphere)\\n\\\n    float atmosphereAlpha = clamp((outerRadius - cameraHeight) / (outerRadius - innerRadius), 0.0, 1.0);\\n\\\n\\n\\\n    // Alter alpha based on time of day (0.0 = night , 1.0 = day)\\n\\\n    float nightAlpha = (lightEnum != 0.0) ? clamp(dot(normalize(positionWC), lightDirection), 0.0, 1.0) : 1.0;\\n\\\n    atmosphereAlpha *= pow(nightAlpha, 0.5);\\n\\\n\\n\\\n    vec4 finalColor = vec4(rgb, mix(clamp(rgbExposure.b, 0.0, 1.0), 1.0, atmosphereAlpha) * smoothstep(0.0, 1.0, czm_morphTime));\\n\\\n\\n\\\n    if (mieColor.b > 1.0)\\n\\\n    {\\n\\\n        // Fade atmosphere below the ellipsoid. As the camera zooms further away from the ellipsoid draw\\n\\\n        // a larger atmosphere ring to cover empty space of lower LOD globe tiles.\\n\\\n        float strength = mieColor.b;\\n\\\n        float minDistance = outerRadius;\\n\\\n        float maxDistance = outerRadius * 3.0;\\n\\\n        float maxStrengthLerp = 1.0 - clamp((maxDistance - cameraHeight) / (maxDistance - minDistance), 0.0, 1.0);\\n\\\n        float maxStrength = mix(100.0, 10000.0, maxStrengthLerp);\\n\\\n        strength = min(strength, maxStrength);\\n\\\n        float alpha = 1.0 - (strength / maxStrength);\\n\\\n        finalColor.a = alpha;\\n\\\n    }\\n\\\n\\n\\\n    return finalColor;\\n\\\n}\\n\\\n\";\n"},"lineCount":null}},"error":null,"hash":"3be6b67e867092d6ae95855d8ea2314e","cacheData":{"env":{}}}